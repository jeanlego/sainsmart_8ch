#!/usr/bin/env python3
#
# Copyright (c) 2016, Heinrich Schuchardt <xypron.glpk@gmx.de>
# Copyright (c) 2018, Vince Patron <vince@patronweb.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ORIGINAL: https://github.com/xypron/pyrelayctl
#
# CHANGELOG:
#   18/06/12 vpatron
#      Made compatible with Windows. Converted to object style. Excludes FT232
#      boards. See https://github.com/vpatron/relay_ft245r


"""relay_ft245r
relay_ft245r is a library to control FTDI FT245R based relay boards. This
includes the SainSmart 4-channel 5V USB relay board. The relays can be switched
on and off via USB.

The library depends on PyUSB (https://github.com/walac/pyusb).

On both Linux and Windows, PyUSB can be installed using Python's pip:

        python -m pip install pyusb

----------
FOR LINUX:
----------
In Debian, only members of plugdev can access the USB devices.

1) Add your users to plugdev. Change "username" to your user name.

        sudo adduser username plugdev

2) Add a udev rule to give the FT245R device to group "plugdev".

        sudo nano /lib/udev/rules.d/60-relay_ft245r.rules

Edit the file and add this line:

        SUBSYSTEM=="usb", ATTR{idVendor}=="0403", ATTR{idProduct}=="6001", GROUP="plugdev", MODE="660", ENV{MODALIAS}="ignore"

Then reload the udev rules with

        udevadm control --reload-rules

PyRelayCtl is licensed under a modified BSD license.
"""

import usb.core
import usb.util
import platform
import sys
import time
import argparse
from array import array

class FT245R:
        def _list_dev(self):
                """
                Returns the list of FT245R devices.
                @return: device list
                """
                ret = []
                for dev in usb.core.find(find_all=True,idVendor=self.VID,idProduct=self.PID):
                        # Ignore FT232 UART. Has same VID and PID as FT245R.
                        if dev.product == self.PROD_STR:
                                ret.append(dev)
                return ret


        def _disconnect(self):
                """
                Disables output to the device. Attaches the kernel driver if available.
                                """
                self.is_connected = False
                usb.util.release_interface(self.dev, 0)
                usb.util.dispose_resources(self.dev)
                if platform.system() != 'Windows':
                        try:
                                if not self.dev.is_kernel_driver_active(0):
                                        self.dev.attach_kernel_driver(0)
                        except:
                                pass


        def _connect(self):
                """
                Enables output to the device. Detaches the kernel driver if attached.

                @param dev: device
                """
                
                # Detach kernel driver
                if platform.system() != 'Windows':
                        if self.dev.is_kernel_driver_active(0):
                                try:
                                        self.dev.detach_kernel_driver(0)
                                except:
                                        raise RuntimeError("relayctl: failure to detach kernel driver")

                usb.util.claim_interface(self.dev, 0)
                # Set the active configuration. Windows errors if this is not done.
                # But Linux errors if this is done more than once (without closing)
                try:
                        self.dev.set_configuration()
                except:
                        self.dev.get_active_configuration()

                # Enable bitbang mode
                ret = self.dev.ctrl_transfer(0x40, 0x0b, 0x01ff, 0x01, None, 500)
                if ret < 0:
                        raise RuntimeError("relayctl: failure to enable bitbang mode")
                self.is_connected = True
                self.relay_state, _ = self.getstate()
                        
        def __init__(self):
                self.VID = 0x0403                   # USB Vendor ID of FT245R and FT232
                self.PID = 0x6001                   # USB Product ID of FT245R and FT232
                self.PROD_STR = u'FT245R USB FIFO'  # differentiate from FT232 USB UART
                self.is_connected = False
                self.dev = None
                self.RELAY_MIN = 1
                self.RELAY_MAX = 8
                self.relay_state = 0                # 8 bits representing 8 relays

                dev_list = self._list_dev()
                # list of FT245R devices are returned
                if len(dev_list) != 1:
                        raise RuntimeError("relayctl: Unable to detect only one FT245R device")

                self.dev = dev_list[0]
                self._disconnect()
                self._connect()

        def __del__(self):
                self._disconnect()
                
        def getstate(self):
                """
                Gets a byte which represents the status of all 8 relays.

                @return: status
                """

                # Check for errors
                if not self.is_connected:
                        raise IOError('Must connect to device first')

                # Read status
                buf = bytes([0x00]);
                buf = self.dev.ctrl_transfer(0xC0, 0x0C, 0x0000, 0x01, buf, 500)
                if len(buf) == 0:
                        raise RuntimeError("relayctl: failure to read status")
        
                self.relay_state = buf[0]
                relay_states = []
                i = 0
                while i < 8:
                        relay_states.append(bool(self.relay_state & (1 << i)))
                        i += 1

                return self.relay_state, relay_states


        def setstate(self, value):
                """
                Sets all relays to the state in FT245R.relay_state.
                """

                # Check for errors
                if not self.is_connected:
                        raise IOError('Must connect to device first')
                        
                # Write status
                ret = self.dev.write(0x02, value.to_bytes(1, 'little'), 500)
                print(ret)
                if ret < 0:
                        raise RuntimeError("relayctl: failure to write status")

                self.relay_state = value
                return


        def set(self, relay_num, value):
                """
                Switches relay relay_num off.

                @param relay_num: which relay
                """
                mask = 0x1 << (relay_num)
                self.setstate(self.relay_state|(mask) if value else self.relay_state&~(mask))


 
def do_set(rb, args):
        if args.gpio is None:
                rb.setstate(0xFF if args.value else 0x00)
        else:
                rb.set(args.gpio, args.value)
        
def do_get(rb, args):
        _, state = rb.getstate()
        if args.gpio is None:
                i = 0
                for relay in state:
                        print(f'{i}: {"ON" if relay else "OFF"}')
                        i += 1
        else:
                print(f'{args.gpio}: {"ON" if state[args.gpio] else "OFF"}')

def do_toggle(rb, args):
        byte, state = rb.getstate()
        if args.gpio is None:
                rb.setstate(~byte)
        else:
                rb.set(args.gpio, not state[args.gpio])
                
        time.sleep(args.seconds)

        if args.gpio is None:
                rb.setstate(byte)
        else:
                rb.set(args.gpio, state[args.gpio])
 

def str2bool(v):
        if isinstance(v, bool):
                return v
        if v.lower() in ('1', 'on'):
                return True
        elif v.lower() in ('0', 'off'):
                return False
        else:
                raise argparse.ArgumentTypeError('Boolean value expected.')

def main(args):
        parser = argparse.ArgumentParser(prog = 'relay',description = 'toggle relay')
        subparsers = parser.add_subparsers()

        parser_set = subparsers.add_parser('set', help='set a relay value')
        parser_set.add_argument('gpio', choices=range(0,8), nargs='?', type=int, default=None, help='the gpio')
        parser_set.add_argument('value', type=str2bool, help='the value')
        parser_set.set_defaults(func=do_set)

        parser_get = subparsers.add_parser('get', help='get a relay value')
        parser_get.add_argument('gpio', choices=range(0,8), nargs='?', type=int, default=None, help='the gpio') 
        parser_get.set_defaults(func=do_get)

        parser_toggle = subparsers.add_parser('toggle', help='toggle the relay value')
        parser_toggle.add_argument('-s', '--seconds', help='the delay between the toggle', type=float, default='5')
        parser_toggle.add_argument('gpio', choices=range(0,8), nargs='?', type=int, default=None, help='the gpio')
        parser_toggle.set_defaults(func=do_toggle)  


        if len(args) == 0:
                args.append("--help")
                
        options = parser.parse_args(args=args)
        ec = 0
        if hasattr(options, 'func'):
                ec = options.func(FT245R(), options)
        return ec

if __name__ == "__main__":
        sys.exit(main(sys.argv[1:]))

