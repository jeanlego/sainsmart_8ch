#!/usr/bin/env python3
#
# Copyright (c) 2016, Heinrich Schuchardt <xypron.glpk@gmx.de>
# Copyright (c) 2018, Vince Patron <vince@patronweb.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ORIGINAL: https://github.com/xypron/pyrelayctl
#
# CHANGELOG:
#   18/06/12 vpatron
#      Made compatible with Windows. Converted to object style. Excludes FT232
#      boards. See https://github.com/vpatron/relay_ft245r


"""relay_ft245r
relay_ft245r is a library to control FTDI FT245R based relay boards. This
includes the SainSmart 4-channel 5V USB relay board. The relays can be switched
on and off via USB.

The library depends on PyUSB (https://github.com/walac/pyusb).

On both Linux and Windows, PyUSB can be installed using Python's pip:

        python -m pip install pyusb

----------
FOR LINUX:
----------
In Debian, only members of plugdev can access the USB devices.

1) Add your users to plugdev. Change "username" to your user name.

        sudo adduser username plugdev

2) Add a udev rule to give the FT245R device to group "plugdev".

        sudo nano /lib/udev/rules.d/60-relay_ft245r.rules

Edit the file and add this line:

        SUBSYSTEM=="usb", ATTR{idVendor}=="0403", ATTR{idProduct}=="6001", GROUP="plugdev", MODE="660", ENV{MODALIAS}="ignore"

Then reload the udev rules with

        udevadm control --reload-rules

PyRelayCtl is licensed under a modified BSD license.
"""

import usb.core
import usb.util
import platform
import sys
import time
import argparse
import os
import json

class FT245R:
        def _list_dev(self):
                """
                Returns the list of FT245R devices.
                @return: device list
                """
                ret = []
                for dev in usb.core.find(find_all=True,idVendor=self.VID,idProduct=self.PID):
                        # Ignore FT232 UART. Has same VID and PID as FT245R.
                        if dev.product == self.PROD_STR:
                                ret.append(dev)
                return ret


        def _disconnect(self):
                """
                Disables output to the device. Attaches the kernel driver if available.
                                """
                self.is_connected = False
                usb.util.release_interface(self.dev, 0)
                usb.util.dispose_resources(self.dev)
                if platform.system() == 'Linux':
                        try:
                                if not self.dev.is_kernel_driver_active(0):
                                        self.dev.attach_kernel_driver(0)
                        except:
                                pass


        def _connect(self):
                """
                Enables output to the device. Detaches the kernel driver if attached.

                @param dev: device
                """
                
                # Detach kernel driver
                if platform.system() != 'Windows':
                        if self.dev.is_kernel_driver_active(0):
                                try:
                                        self.dev.detach_kernel_driver(0)
                                except:
                                        raise RuntimeError("relayctl: failure to detach kernel driver")

                usb.util.claim_interface(self.dev, 0)
                # Set the active configuration. Windows errors if this is not done.
                # But Linux errors if this is done more than once (without closing)
                try:
                        self.dev.set_configuration()
                except:
                        self.dev.get_active_configuration()

                # Enable bitbang mode
                ret = self.dev.ctrl_transfer(0x40, 0x0b, 0x01ff, 0x01, None, 500)
                if ret < 0:
                        raise RuntimeError("relayctl: failure to enable bitbang mode")
                
                self.is_connected = True
                self.relay_state, _ = self.get()

    
        def __init__(self, size=8, config_path=None):
                self.VID = 0x0403                   # USB Vendor ID of FT245R and FT232
                self.PID = 0x6001                   # USB Product ID of FT245R and FT232
                self.PROD_STR = u'FT245R USB FIFO'  # differentiate from FT232 USB UART
                self.is_connected = False
                self.dev = None
                self.size = size
                self.relay_state = 0                # 8 bits representing 8 relays

                dev_list = self._list_dev()
                if len(dev_list) != 1:
                        raise RuntimeError("relayctl: Unable to detect only one FT245R device")

                self.dev = dev_list[0]
                
                self.config_path = config_path
                if self.config_path is not None and os.path.isfile(self.config_path):
                        with open(self.config_path, 'r') as config_file:
                                self.config = json.load(config_file)
                else:
                        self.config = {}
                
                self.serial = usb.util.get_string(self.dev, self.dev.iSerialNumber)
                # { "id": "alias" }
                aliases = self.config.get(self.serial, {}).get('aliases',{})
                self.aliases = []
                for i in range(0, self.size):
                        i = str(i)
                        if i in aliases:
                                self.aliases.append(aliases[i])
                        else:
                                self.aliases.append(i)

                self._connect()


        def __del__(self):
                self._disconnect()


        def _get_port_id(self, value):
                """
                @return the port id from a name or id
                """
                if isinstance(value, int):
                        return value
                elif value.isdigit():
                        value = int(value)
                        if value >= 0 and value < 8:
                                return value

                if value in self.aliases:
                        return self.aliases.index(str(value))

                raise RuntimeError(f"relayctl: Invalid name or port id {value}")


        def get(self, portname=None):
                """
                Gets a byte which represents the status of all 8 relays.

                @return: status
                """
                # Check for errors
                if not self.is_connected:
                        raise IOError('Must connect to device first')

                # Read status
                buf = bytes([0x00]);
                buf = self.dev.ctrl_transfer(0xC0, 0x0C, 0x0000, 0x01, buf, 500)
                if len(buf) == 0:
                        raise RuntimeError("relayctl: failure to read status")
        
                self.relay_state = buf[0]
                if portname:
                        portid = self._get_port_id(portname)
                        value = bool(self.relay_state & (1 << portid))
                        return value, [ {'id': portid, 'alias': self.aliases[portid], 'value': value } ]
                else:
                        return self.relay_state, [ {'id': i, 'alias': self.aliases[i], 'value': bool(self.relay_state & (1 << i)) } for i in range(0,self.size) ]


        def set(self, value, portname=None):
                """
                Switches relay relay_num off.

                @param relay_num: which relay
                """
                if portname:
                        # the value is a mask if the portname is defined
                        portid = self._get_port_id(portname)
                        mask = 0x1 << (portid)
                        value = self.relay_state|(mask) if value else self.relay_state&~(mask)

                # Check for errors
                if not self.is_connected:
                        raise IOError('Must connect to device first')
                        
                # Write status
                ret = self.dev.write(0x02, value.to_bytes(1, 'little'), 500)
                if ret < 0:
                        raise RuntimeError("relayctl: failure to write status")

                self.relay_state = value


        def dumpstate(self, portname=None):
                _, states = self.get(portname=portname)
                to_print = []
                maxlen = 0
                for i in states:
                        name = f"D{i['id']}"
                        if str(i['id']) != i['alias']:
                                name += f" ({i['alias']})"
                        name +=  ":"
                        maxlen = max(maxlen, len(name))
                        to_print.append([name, f"{'ON' if i['value'] else 'OFF'}"])        
                        
                for ln in to_print:
                        print(f'{ln[0] : <{maxlen+1}}{ln[1]}')

        def set_config(self, keys, value):
                d = self.config
                keys = [self.serial] + keys
                for key in keys[:-1]:
                        if key in d:
                                d = d[key]
                        else:
                                d = d.setdefault(key, {})
                d[keys[-1]] = value
        
        def write_config(self):
                with open(self.config_path, 'w+') as config_file:
                        json.dump(self.config, config_file, indent=2)       


def do_set(rb, args):
        if args.gpio is None:
                args.value = 0xFF if args.value else 0x00
        
        rb.set(args.value, portname=args.gpio)
        

def do_get(rb, args):
        rb.dumpstate(portname=args.gpio)


def do_toggle(rb, args):
        value, _ = rb.get(portname=args.gpio)
        inverse = ~value if args.gpio is None else not value
        rb.set(inverse, portname=args.gpio)
        time.sleep(args.seconds)
        rb.set(value, portname=args.gpio)
 
 
def do_config(rb, args):
        rb.set_config(args.key.split('.'), args.value)
        rb.write_config()


def str2bool(v):
        if isinstance(v, bool):
                return v
        if v.lower() in ('1', 'on'):
                return True
        elif v.lower() in ('0', 'off'):
                return False
        else:
                raise argparse.ArgumentTypeError('Boolean value expected.')


def main(args):
        parser = argparse.ArgumentParser(prog = 'relay',description = 'toggle relay')
        parser.add_argument('--config', '-c', default="~/.relayrc", type=str, help='the config path')
        subparsers = parser.add_subparsers()
        
        parser_config = subparsers.add_parser('config', help='set config values')
        parser_config.add_argument('key', type=str, help='the config key')
        parser_config.add_argument('value', type=str, help='the config value')
        parser_config.set_defaults(func=do_config)
        
        parser_set = subparsers.add_parser('set', help='set a relay value')
        parser_set.add_argument('gpio', nargs='?', type=str, default=None, help='the gpio')
        parser_set.add_argument('value', type=str2bool, help='the value')
        parser_set.set_defaults(func=do_set)

        parser_get = subparsers.add_parser('get', help='get a relay value')
        parser_get.add_argument('gpio', nargs='?', type=str, default=None, help='the gpio') 
        parser_get.set_defaults(func=do_get)

        parser_toggle = subparsers.add_parser('toggle', help='toggle the relay value')
        parser_toggle.add_argument('-s', '--seconds', help='the delay between the toggle', type=float, default=0.5)
        parser_toggle.add_argument('gpio', nargs='?', type=str, default=None, help='the gpio')
        parser_toggle.set_defaults(func=do_toggle)  


        if len(args) == 0:
                args.append("--help")
                
        options = parser.parse_args(args=args)
        ec = 0
        if hasattr(options, 'func'):   
                ec = options.func(FT245R(config_path=os.path.realpath(os.path.expanduser(options.config))), options)
        return ec

if __name__ == "__main__":
        sys.exit(main(sys.argv[1:]))

